@use "../abstracts/variables" as var;
@use "../abstracts/functions" as fct;
@use "../abstracts/mixins" as mix;

$button-colors: (
	"accept": map-get(var.$colors, "accept"),
	"decline": map-get(var.$colors, "decline"),
	"secondary": map-get(var.$colors, "secondary"),
	"accent": map-get(var.$colors, "accent"),
);

.#{var.$prefix}__btn {
	--#{var.$prefix}-dynamic-color-text: #{map-get(var.$colors, "bg")};

	@include mix.flexFullCenter();
	cursor: pointer;
	font-size: map-get(var.$fsize, "md");
	font-weight: 700;
	color: var(--#{var.$prefix}-dynamic-color-text);

	svg {
		width: fct.pixelToRem(12px);
		height: fct.pixelToRem(12px);
		margin-right: map-get(var.$gap, "xs");
		fill: currentColor;
	}
}

.#{var.$prefix}__btn-- {
	&primary {
		@include mix.roundCorner(map-get(var.$corner, "sm"));
		padding: map-get(var.$gap, "xs") map-get(var.$gap, "sm");
	}

	&tertiary {
		background-color: unset;
		color: map-get(var.$colors, "text");
		text-decoration: underline;
	}
}

@each $name, $color in $button-colors {
	.#{var.$prefix}__btn--#{$name} {
		background-color: $color;
		@include mix.transitionShort();

		&:hover {
			filter: brightness(92%);
		}

		&:active {
			filter: brightness(78%);
		}
	}
}

.#{var.$prefix}__btn__group {
	@include mix.flexFullCenter();
	flex-direction: column;
	flex-wrap: wrap;
	margin-top: map-get(var.$gap, "md");

	.secondary,
	.action {
		@include mix.flexFullCenter();
		gap: map-get(var.$gap, "sm");
	}

	.action {
		margin-top: map-get(var.$gap, "md");
	}
}

@media only screen and (min-width: map-get(var.$breakpoints, "md")) {
	.#{var.$prefix}__btn__group {
		justify-content: space-between;
		flex-direction: row;
		margin-top: map-get(var.$gap, "md");

		.action {
			margin-top: unset;
		}
	}
}
